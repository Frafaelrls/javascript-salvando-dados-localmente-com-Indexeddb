{"version":3,"sources":["../../app-es6/services/ProxyFactory.js"],"names":["ProxyFactory","objeto","props","acao","Proxy","get","target","prop","receiver","includes","_ehFuncao","console","log","Reflect","apply","arguments","set","value","func","Function"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAAaA,Y;;;;;;;2CAQKC,M,EAAQC,K,EAAOC,I,EAAM;AAC/B,+BAAO,IAAIC,KAAJ,CAAUH,MAAV,EAAkB;AAErBI,+BAFqB,eAEjBC,MAFiB,EAETC,IAFS,EAEHC,QAFG,EAEO;;AAExB;;;;;AAKA,oCAAIN,MAAMO,QAAN,CAAeF,IAAf,KAAwBP,aAAaU,SAAb,CAAuBJ,OAAOC,IAAP,CAAvB,CAA5B,EAAkE;;AAE9D,2CAAO,YAAY;AACfI,gDAAQC,GAAR,oBAA6BL,IAA7B;;AAEA;;;;;AAMAM,gDAAQC,KAAR,CAAcR,OAAOC,IAAP,CAAd,EAA4BD,MAA5B,EAAoCS,SAApC;AACA,+CAAOZ,KAAKG,MAAL,CAAP;AACH,qCAXD;AAYH;;AAED,uCAAOA,OAAOC,IAAP,CAAP;AAEH,6BA3BoB;AA8BrBS,+BA9BqB,eA8BjBV,MA9BiB,EA8BTC,IA9BS,EA8BHU,KA9BG,EA8BIT,QA9BJ,EA8Bc;AAC/B,oCAAIN,MAAMO,QAAN,CAAeF,IAAf,CAAJ,EAA0B;AACtBD,2CAAOC,IAAP,IAAeU,KAAf;AACAd,yCAAKG,MAAL;AACH;AACD,uCAAOA,OAAOC,IAAP,IAAeU,KAAtB;AACH;AApCoB,yBAAlB,CAAP;AAsCH;;;8CAEgBC,I,EAAM;AACnB,+BAAO,QAAQA,IAAR,yCAAQA,IAAR,cAAyBC,QAAzB,yCAAyBA,QAAzB,EAAP;AACH","file":"ProxyFactory.js","sourcesContent":["export class ProxyFactory {\r\n\r\n    /* \r\n        Recebe, o objeto que a proxy vai ser criada \r\n        Um array com as propriedades (props) que devem ser monitoradas\r\n        E uma ação (acao) que deve ser executada quando as propriedades forem acessadas\r\n    */\r\n\r\n    static create(objeto, props, acao) {\r\n        return new Proxy(objeto, {\r\n\r\n            get(target, prop, receiver) {\r\n\r\n                /*\r\n                    Verificando se a propriedade enviada é um dos dois métodos e se é uma função\r\n                    Caso verdadeiro, será retornado uma função\r\n                */\r\n\r\n                if (props.includes(prop) && ProxyFactory._ehFuncao(target[prop])) {\r\n\r\n                    return function () {\r\n                        console.log(`Interceptando ${prop}`);\r\n\r\n                        /*\r\n                          O Reflect faz com que o método alvo receba os parâmetros (arguments) enviados\r\n                          e executa o método dentro do seu contexto (target)  \r\n\r\n                        */\r\n\r\n                        Reflect.apply(target[prop], target, arguments);\r\n                        return acao(target);\r\n                    }\r\n                }\r\n\r\n                return target[prop];\r\n\r\n            },\r\n\r\n            // O set será chamado quando ocorrer o acesso a uma propriedade\r\n            set(target, prop, value, receiver) {\r\n                if (props.includes(prop)) {\r\n                    target[prop] = value;\r\n                    acao(target);\r\n                }\r\n                return target[prop] = value;\r\n            }\r\n        });\r\n    }\r\n\r\n    static _ehFuncao(func) {\r\n        return typeof (func) == typeof (Function);\r\n    }\r\n\r\n}"]}