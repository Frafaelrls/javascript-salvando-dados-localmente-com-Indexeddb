{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","data","quantidade","valor","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAASA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCACIC,a;AAET,uCAAYC,UAAZ,EAAwB;AAAA;;AAEpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AAEH;;;;6CAEQC,U,EAAY;AAAA;;AAEjB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,MAAKN,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,MAAKN,MAAN,CAA7B,EAA4C,WAA5C,EACTO,WADS,CACG,MAAKP,MADR,EAETQ,GAFS,CAEL,EAAEC,MAAMR,WAAWQ,IAAnB,EAAyBC,YAAYT,WAAWS,UAAhD,EAA4DC,OAAOV,WAAWU,KAA9E,EAFK,CAAd;;AAIAN,oCAAQO,SAAR,GAAoB,aAAK;;AAErBT;AACH,6BAHD;;AAKAE,oCAAQQ,OAAR,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAd,uCAAO,0CAAP;AACH,6BAJD;AAMH,yBAjBM,CAAP;AAmBH;;;iDAEY;AAAA;;AAET,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIe,SAAS,OAAKpB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRoB,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAK;;AAEpB;AACA,oCAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,oCAAID,KAAJ,EAAW;;AAEP,wCAAIE,OAAOF,MAAMG,KAAjB;AACA;AACAJ,gDAAYK,IAAZ,CAAiB,IAAI9B,UAAJ,CAAe4B,KAAKf,IAApB,EAA0Be,KAAKd,UAA/B,EAA2Cc,KAAKb,KAAhD,CAAjB;;AAEAW,0CAAMK,QAAN;AAEH,iCARD,MAQO;;AAEHxB,4CAAQkB,WAAR;AACH;AACJ,6BAjBD;;AAmBAF,mCAAON,OAAP,GAAiB,aAAK;;AAElBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAd,uCAAO,wCAAP;AACH,6BAJD;AAMH,yBAlCM,CAAP;AAoCH;;;iDAEY;AAAA;;AACT,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,gCAAIC,UAAU,OAAKN,WAAL,CACbO,WADa,CACD,CAAC,OAAKN,MAAN,CADC,EACc,WADd,EAEbO,WAFa,CAED,OAAKP,MAFJ,EAGb4B,KAHa,EAAd;;AAKAvB,oCAAQO,SAAR,GAAoB;AAAA,uCAAKT,QAAQ,kCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQQ,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAf,wCAAQ,wCAAR;AACH,6BAHD;AAKH,yBAbM,CAAP;AAcH","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from \"../models/Negociacao\";\r\nexport class NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes'\r\n\r\n    }\r\n\r\n    adiciona(negociacao) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection.transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add({ data: negociacao.data, quantidade: negociacao.quantidade, valor: negociacao.valor });\r\n\r\n            request.onsuccess = e => {\r\n\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n                reject('Não foi possível adicionar a negociação;');\r\n            };\r\n\r\n        });\r\n\r\n    }\r\n\r\n    listaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let cursor = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = e => {\r\n\r\n                // ponteiro para o objeto atual\r\n                let atual = e.target.result;\r\n\r\n                if (atual) {\r\n\r\n                    let dado = atual.value;\r\n                    // Cria um novo objeto com os dados salvos no banco \r\n                    negociacoes.push(new Negociacao(dado.data, dado.quantidade, dado.valor));\r\n\r\n                    atual.continue();\r\n\r\n                } else {\r\n\r\n                    resolve(negociacoes);\r\n                }\r\n            }\r\n\r\n            cursor.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n                reject('Não foi possível listar as negociações')\r\n            };\r\n\r\n        });\r\n\r\n    }\r\n\r\n    apagaTodos() {\r\n        return new Promise((resolve, reject) =>{\r\n            let request = this._connection\r\n            .transaction([this._store], 'readwrite')\r\n            .objectStore(this._store)\r\n            .clear();\r\n\r\n            request.onsuccess = e => resolve('Negociações apagadas com sucesso');\r\n            \r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                resolve('Não foi possível apagar as negociações');\r\n            };\r\n\r\n        });\r\n    }\r\n\r\n}"]}