{"version":3,"sources":["../../app-es6/helpers/DateHelper.js"],"names":["DateHelper","Error","data","getDate","getMonth","getFullYear","texto","test","Date","split","map","item","indice"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAAaA,U;AAET,sCAAa;AAAA;;AAET;;;;AAIA,0BAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACH;;;;kDAEoBC,I,EAAM;;AAEvB;AACA,+BAAUA,KAAKC,OAAL,EAAV,UAA4BD,KAAKE,QAAL,KAAkB,CAA9C,UAAmDF,KAAKG,WAAL,EAAnD;AAEH;;;kDAEoBC,K,EAAO;;AAExB;;;;AAIA,4BAAG,CAAC,oBAAoBC,IAApB,CAAyBD,KAAzB,CAAJ,EAAqC,MAAM,IAAIL,KAAJ,CAAU,kCAAV,CAAN;;AAErC;;;;;;;;;;;AAcA,kEAAWO,IAAX,mCAAmBF,MAAMG,KAAN,CAAY,GAAZ,EAClBC,GADkB,CACd,UAACC,IAAD,EAAOC,MAAP;AAAA,mCAAkBD,OAAOC,SAAS,CAAlC;AAAA,yBADc,CAAnB;AAGH","file":"DateHelper.js","sourcesContent":["export class DateHelper {\r\n    \r\n    constructor(){\r\n\r\n        /*\r\n            A declaração throw lança uma exceção definida pelo usuário\r\n            Semelhante a cláusula raise do Python\r\n        */\r\n        throw new Error('Essa classe não pode ser instanciada')\r\n    }\r\n    \r\n    static dataParaTexto(data) {\r\n\r\n        // Abaixo é utilizado o template string (semelhante ao f-string do python)\r\n        return `${data.getDate()}/${data.getMonth() + 1}/${data.getFullYear()}`;           \r\n        \r\n    }\r\n\r\n    static textoParaData(texto) { \r\n\r\n        /*\r\n            Na espressão regular abaixo, estamos esperando digito numérico (\\d) no tamanho n ({n})\r\n            Esse tipo de elevação de erro é chamada de fail-fast (falha rápida)\r\n        */\r\n        if(!/\\d{4}-\\d{2}-\\d{2}/.test(texto)) throw new Error('Deve está no formato: aaaa-mm-dd');\r\n        \r\n        /*\r\n            Usando a expressão regular /-/g, onde, será verificado todas(g) as ocorrências \r\n            e serão subsistidas por ','\r\n            let data = new Date(this.#inputData.value.replace(/-/g, ','));\r\n\r\n            Os três pontos abaixo é um spread operator, onde cada ponto irá receber um item \r\n            de um array (semelhante ao desempacotamento de tuplas do Python)\r\n\r\n            A função map() irá percorrer todos os itens do array chamando a função em cada item\r\n\r\n            Temos também o uso da arrow functions(função de flecha) representada por =>\r\n            Quando temos apenas uma unica instrução em uma arrow funcion podemos omitir o bloco\r\n            Por termos apenas uma única instrução a arrow funcion já realiza o retorno da operação\r\n        */\r\n        return new Date(...texto.split('-')\r\n        .map((item, indice) => item - indice % 2))\r\n        \r\n    }\r\n\r\n}"]}